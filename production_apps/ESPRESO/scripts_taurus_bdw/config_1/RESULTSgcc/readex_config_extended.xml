<?xml version="1.0" encoding="utf-8"?>
<Configuration>
    <!--  The following section specifies the dynamism results for each significant regions and across all phases  -->
    <readex-dyn-detect>
        <Intra-phase>
            <significantRegion>
                <name>void espreso::input::Block&lt;TElement&gt;::elements(std::vector&lt;espreso::Element*&gt;&amp;, size_t) [with TElement = espreso::input::Hexahedron8]</name>
                <granularity>0.21365799999999999</granularity>
                <weight>0.099856985287244571</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>272994435.13503969</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>void espreso::Mesh::fillNodesFromCoordinates()</name>
                <granularity>0.13223099999999999</granularity>
                <weight>0.061800583275691226</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>11510806858.615376</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>void espreso::Mesh::fillParentElementsToNodes()</name>
                <granularity>0.32212000000000002</granularity>
                <weight>0.29613346170383803</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>5263604.5988013512</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>void espreso::input::Block&lt;TElement&gt;::boundaries(std::vector&lt;espreso::Element*&gt;&amp;, const std::vector&lt;int&gt;&amp;) [with TElement = espreso::input::Hexahedron8]</name>
                <granularity>0.103989</granularity>
                <weight>0.048601166551382476</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>10481709.309555339</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>void espreso::Mesh::mapCoordinatesToDomains()</name>
                <granularity>0.24956300000000001</granularity>
                <weight>0.11663784561888917</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>12165789.293597862</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>void espreso::Region::computeArea(const espreso::Coordinates&amp;) const</name>
                <granularity>0.57663600000000004</granularity>
                <weight>0.26950141145239387</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>171092617356.70328</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>std::vector&lt;espreso::Element*&gt; espreso::mergeElements(size_t, std::vector&lt;std::vector&lt;espreso::Element*&gt; &gt;&amp;, MergeFunction) [with MergeFunction = espreso::Mesh::fillFacesFromElements(std::function&lt;bool(const std::vector&lt;espreso::Element*&gt;&amp;, const espreso::Element*)&gt;)::&lt;lambda(espreso::Element*, espreso::Element*)&gt;]</name>
                <granularity>0.33606599999999998</granularity>
                <weight>2.154390458207923</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>18005236.680970587</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>void espreso::Assembler::timeWrapper(const string&amp;, std::function&lt;void()&gt;)</name>
                <granularity>2.3083100000000001</granularity>
                <weight>24.791086350974929</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>32.589027335423133</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>virtual void espreso::Physics::updateMatrix(const espreso::Step&amp;, espreso::Matrices, const std::vector&lt;espreso::Solution*&gt;&amp;)</name>
                <granularity>3.6980900000000001</granularity>
                <weight>24.196920977360676</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>32.037334683739147</compute_intensity>
            </significantRegion>
            <significantRegion>
                <name>void espreso::EqualityConstraints::insertElementGluingToB1(const espreso::Step&amp;, bool, bool)</name>
                <granularity>0.19827800000000001</granularity>
                <weight>0.40593230636929584</weight>
                <time_variation_reg>0</time_variation_reg>
                <time_variation_phase>0</time_variation_phase>
                <compute_intensity>6344965.2391464524</compute_intensity>
            </significantRegion>
        </Intra-phase>
        <Inter-phase>
            <name>Main</name>
            <variation>0</variation>
        </Inter-phase>
        <Thresholds>
            <weight>10</weight>
            <time_variation>10</time_variation>
            <compute_intensity_variation>10</compute_intensity_variation>
            <granularity_significant_region>0.10000000000000001</granularity_significant_region>
        </Thresholds>
        <dynamism>
            <dyn_time_variation/>
            <dyn_comIn_variation/>
        </dynamism>
    </readex-dyn-detect>
    <!--  This section specifies all the tuning parameter such as frequency, uncore frequency, no of threads and so on  -->
    <tuningParameter>
        <frequency>
            <min_freq>1300</min_freq>
            <max_freq>2500</max_freq>
            <freq_step>200</freq_step>
            <default>2500</default>
        </frequency>
        <uncore>
            <min_freq>1200</min_freq>
            <max_freq>3000</max_freq>
            <freq_step>200</freq_step>
            <default>3000</default>
        </uncore>
        <openMPThreads>
            <lower_value>2</lower_value>
            <step>2</step>
        </openMPThreads>
    </tuningParameter>
    <!--  The following section specifies all the objective metrics  -->
    <objectives>
        <objective>Energy</objective>
        <!--<objective>NormalizedEnergy</objective>-->
        <objective>Time</objective>
        <!--<objective>NormalizedTime</objective>-->
        <!--<objective>EDP</objective>-->
        <!--<objective>NormalizedEDP</objective>-->
        <!--<objective>ED2P</objective>-->
        <!--<objective>NormalizedED2P</objective>-->
        <!--<objective>CPUEnergy</objective>-->
        <!--<objective>NormalizedCPUEnergy</objective>-->
        <!--<objective>TCO</objective>-->
        <!--<objective>NormalizedTCO</objective>-->
        <!--<CostPerJoule>0.00000008</CostPerJoule>-->
        <!-- Euro -->
        <!--<CostPerCoreHour>1.0</CostPerCoreHour>-->
        <!-- Euro -->
    </objectives>
    <!--  metrics section specifies energy metrics to be measured across nodes. In SearchAlgorithm section one has to specify at least one search algorithm for readex tuning plugins  -->
    <periscope>
        <metricPlugin>
            <!--<name>hdeem_sync_plugin</name>-->
            <name>x86_energy_sync_plugin</name>
        </metricPlugin>
        <metrics>
            <!--<node_energy>hdeem/BLADE/E</node_energy>-->
            <!--<cpu0_energy>hdeem/CPU0/E</cpu0_energy>-->
            <!--<cpu1_energy>hdeem/CPU1/E</cpu1_energy>-->
            <node_energy>x86_energy/BLADE/E</node_energy>
        </metrics>
        <metricUnits>
            <timeUnit>s</timeUnit>
            <energyUnit>mj</energyUnit>
            <currencyUnit>Euro</currencyUnit>
        </metricUnits>
        <searchAlgorithm>
            <name>individual</name>
            <keep>2</keep>
            <!--<name>exhaustive</name>-->
            <!--<name>random</name>-->
            <!--<samples>2</samples>-->
        </searchAlgorithm>
        <atp>
            <searchAlgorithm>
                <name>individual_atp</name>
                <!--<name>exhaustive_atp</name>-->
            </searchAlgorithm>
        </atp>
        <tuningModel>
            <file_path>tuning_model.json</file_path>
        </tuningModel>
    </periscope>
    <!--  This section defines which substrate plugin to be used for READEX tuning plugins  -->
    <scorep>
        <tuningSubstrate>rrl</tuningSubstrate>
    </scorep>
</Configuration>
